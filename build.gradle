import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

compileJava.options.encoding = 'UTF-8'

group = project.group_name
version = project.mod_version
archivesBaseName = "[${project.minecraft_version}]${project.mod_id}"

minecraft {
    version = project.minecraft_version + '-' + project.forge_version  // grab latest forge
    mappings = project.mappings_version
    runDir = 'run'

    //replaces in mod Reference class
    replace '@MOD_ID@', project.mod_id
    replace '@MOD_NAME@', project.mod_name
    replace '@MOD_VERSION@', project.mod_version
    replace '@JSON_URL@', project.forgeupdate_url

    replaceIn 'Reference.java'
}

processResources {
    // replaces in mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand ([
            'mod_version': project.mod_version,
            'forge_version': project.forge_version,
            'minecraft_version': project.minecraft_version
        ])
    }

    // copy everything else
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task updateJson {
    def fileName = new File('forgeupdate/forgeupdate.json')
    def fujson = new JsonSlurper().parseText(fileName.text)

//    cannot both be the same name, or task is forever after up to date
//    go with always regenerating instead
//    inputs.file fileName
//    outputs.file fileName

    doLast {
        //update update-URL
        fujson['homepage'] = project.forgeupdate_url

        //update promoted versions
        def lateststr = project.minecraft_version + '-latest'
        fujson['promos'][lateststr] = project.mod_version.toString()
        def recomstr = project.minecraft_version + '-recommended'
        fujson['promos'][recomstr] = project.mod_version.toString()

//    //update version notes
//    relnote = "Get this from git or something"
//    fujson[project.minecraft_version][project.mod_version] = relnote

        def jsOut = JsonOutput.toJson(fujson)
        fileName.write(JsonOutput.prettyPrint(jsOut))
    }
}

build.finalizedBy updateJson

jar {
    classifier = "universal"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'deobf'
}

sourceJar {
    classifier = 'src'
}

artifacts {
    archives deobfJar
    archives sourceJar
}

idea {
    module {
        inheritOutputDirs = true
    }
}

uploadArchives {
    repositories {
        flatDir {
            dirs "${projectDir}/../LocalRepos"
        }
    }
    dependsOn 'build'
    mustRunAfter 'build'
}